<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net6.0;net8.0;net9.0</TargetFrameworks>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <LangVersion>latest</LangVersion>
    <AssemblyName>Ratatui</AssemblyName>
    <RootNamespace>Ratatui</RootNamespace>
    <Title>Ratatui.cs â€” .NET Terminal UI (TUI)</Title>
    <PackageId>Ratatui.cs</PackageId>
    <Authors>holo-q</Authors>
    <RepositoryUrl>https://github.com/holo-q/ratatui-cs</RepositoryUrl>
    <PackageProjectUrl>https://github.com/holo-q/ratatui-cs</PackageProjectUrl>
    <Description>High-performance .NET/C# Terminal UI (TUI) library powered by Rust Ratatui via FFI. Cross-platform (Windows, Linux, macOS) with rich widgets, layout, keyboard/mouse events, batched frame rendering, and headless snapshot testing. Ships prebuilt native binaries per RID and a friendly, idiomatic C# API.</Description>
    <PackageTags>tui;terminal;terminal-ui;console;console-ui;cli;dotnet;dotnet-core;dotnet-8;dotnet-9;csharp;ui;widgets;layout;rust;ffi;bindings;ratatui;cross-platform;windows;linux;macos;headless;testing</PackageTags>
    <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
    <IncludeBuildOutput>true</IncludeBuildOutput>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageIcon>ratatui-icon.png</PackageIcon>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    <Deterministic>true</Deterministic>
    <PackageReleaseNotes>Ratatui.cs: .NET/C# Terminal UI bindings for Rust Ratatui with widgets, events, batched frames, and headless testing. Cross-platform native binaries for Windows, Linux, macOS.</PackageReleaseNotes>
  </PropertyGroup>
  <ItemGroup>
    <None Include="runtimes/**" Pack="true" PackagePath="runtimes/" />
    <None Include="README.md" Pack="true" PackagePath="" />
    <None Include="ratatui-icon.png" Pack="true" PackagePath="" />
    <None Include="ratatui-logo.svg" Pack="true" PackagePath="" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="All" />
  </ItemGroup>

  <!-- Build-time FFI coverage check: ensure every ratatui_ffi export has a matching DllImport. -->
  <PropertyGroup>
    <!-- Set to 'true' to skip the coverage check (not recommended). -->
    <SkipFfiCoverage Condition="'$(SkipFfiCoverage)' == ''">false</SkipFfiCoverage>
  </PropertyGroup>

  <Target Name="CheckFfiCoverage" AfterTargets="Build" Condition=" '$(SkipFfiCoverage)' != 'true' and '$(TargetPath)' != '' ">
    <Message Importance="High" Text="Checking FFI coverage for $(TargetFramework) ($(Configuration))..." />
    <Exec Command="dotnet run --project &quot;$(MSBuildProjectDirectory)/../../tools/BindingCoverage/BindingCoverage.csproj&quot; -- --assembly &quot;$(TargetPath)&quot; --project-dir &quot;$(MSBuildProjectDirectory)&quot;" />
    <Exec Command="dotnet run --project &quot;$(MSBuildProjectDirectory)/../../tools/BindingCoverage/BindingCoverage.csproj&quot; -- --assembly &quot;$(TargetPath)&quot; --project-dir &quot;$(MSBuildProjectDirectory)&quot; --emit-suggestions &quot;$(IntermediateOutputPath)Native.Suggestions.g.cs&quot;" />
    <ItemGroup>
      <Compile Include="$(IntermediateOutputPath)Native.Suggestions.g.cs" Condition="Exists('$(IntermediateOutputPath)Native.Suggestions.g.cs')" />
    </ItemGroup>
  </Target>
</Project>
